Q1:
What happens when you initialize a repository? Why do you need to do it?
A1:
Git init command initializes a repository by creating a hidden .git folder in which the metadata
of the git version control is stored. It is important to initialize a repository so that you could
push commits and have them all saved.

Q2:
How is the staging area different from the working directory and the repository? What value do you
think it offers?
A2:
The staging area will only contain the files that has been added and not all the files from the working
directory. This is valuable because it offer great flexibility by allowing you to choose which files
do you wan to commit and which you don't.

Q3:
How can you use the staging area to make sure you have one commit per logical change?
A3:
Using the gitt diff to compare changes between the workind directory and the staging area. And by using
git diff --staged command to compare changes between the staging area and the last commit. You can add new
files, check the difference between the files in working directory and the staging area and the repository's
last commit to make sure that the files you are about to commit are the right ones and of a logical change.

Q4:
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A4:
Branching is a good way to keep track of different changes you might wanna to do to your files in order to experiment
variations or new features without affecting the main files.

Q5:
How do the diagrams help you visualize the branch structure?
A5:
Drawing a diagram where you displays all or some of the commits in a map like way can help you visualize which commits belong
to which branch. By making a visual diagram you can find your way around in the respository much more easily.

Q6:
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A6:
When merging two branches all the commits from both branches will be visible when running git log and they will be arranged
from newest to oldest. Git compares their files against each other and makes the necessary deletion and addition according
to their common parrent. In the diagram it is more logical to represent that a secondary branch has been merged
into the master branch since the master branch will always remain the main.

Q7:
What are the pros and cons of Git's automatic merging vb always doing merges manually?
A7:
Git automaticaly does the merging for you but in case of a conflict when let's say two users edited the same part of code
and came out with two different versions git will ask you to solve the conflict and choose which version to keep. Though
it might be anoying some things when things are obvious, it helps a lot in making commits more clean and making you more
conscious of the changes.
