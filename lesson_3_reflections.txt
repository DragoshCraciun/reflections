Q1:
When would you want to create a remote repository rather then keeping all you work local?
A1:
Working local has it's advantages, but when you want to share your work with the public and/or also let contributors
make changes then I need to make your repository remote.

Q2:
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your
remote repository?
A2:
I understand why I would always want to push changes manually rather then automatically but I found no information
about why I would like to pull changes manually rather then automatically. So I don't know what to answer here.

Q3:
Describe the differences between forks, clones and branches. When would you use one instead of another?
A3:
Forks are clones that happen directly on github server. After forking a repository, it will be visible on your github
repositories page. Clones are full copies of a repository from the github server to ones local machine or from one
location to another location within the same local machine. Branches are "turn points" that you can do from any commit
that is checkout, from that point forward any changes made on that branch will be visible only on that branch.

Q4:
What is the benefit of having a copy of the last known state of the remote stored locally?
Q4:
Having a copy of the last known state of the remote stored locally would help me solve any conflicts that might be
before pushing the changes to the remote.

Q5:
How would you collaborate without using Git or Github? What would be easier, and what would be harder?
A5:
Collaborating without the use of Git or Gitub would make things alot more difficult. The easy part would be that collaborators
would not have to invest time in learning how to use git and github. The harder part would be the collaboration itelf. Being
limited to the use of other version control programs like google drive or dropbox, will make saveing files at logical points
alot more difficult and accesing them without an internet connection almost impossible.

Q6:
When would you want to make changes in a separate branch rather than directly in master? What benefits does each aproache have?
A6:
Whenever one is working with other people he should make change first in a separate branch and then push that branch into remote
and create a pull request. In this way the other collaborators can check the code and give feedback before mergeing into the master
branch. Though the benefit of making changes directly to the remote/master branch will be faster, having this approach cand cause 
commits "mistakes". Acting in this way the history of the commits can get quite a mess.
